openapi: 3.1.0
info:
  title: FOX API
  version: 1.0.0
  description: REST API for managing products and their history.
  contact:
    name: API Support
    url: https://www.example.com/support
    email: support@example.com

servers:
  - url: http://localhost:8080/v1
  - url: http://localhost/v1

tags:
  - name: Product
  - name: Products
  - name: Product History

paths:
  /product:
    get:
      summary: Get product by ID
      description: Returns detailed information about a product identified by its ID, including name, price, stock, and timestamps.
      tags:
        - Product
      operationId: getProduct
      parameters:
        - in: query
          name: id
          schema:
            type: integer
          required: true
          description: Product ID
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
    post:
      summary: Create a new product
      description: Creates a new product record in the database. Requires a name; other fields default to zero.
      tags:
        - Product
      operationId: postProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '200':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          $ref: '#/components/responses/Error'
    patch:
      summary: Update product partially
      description: Updates selected fields of a product by ID. Only provided fields will be updated.
      tags:
        - Product
      operationId: patchProduct
      parameters:
        - in: query
          name: id
          schema:
            type: integer
          required: true
          description: Product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
    put:
      summary: Insert or update product
      description: Inserts a new product or updates an existing one based on the ID. If ID is not provided or does not exist, a new product is created.
      tags:
        - Product
      operationId: putProduct
      parameters:
        - in: query
          name: id
          schema:
            type: integer
          required: false
          description: Product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '200':
          description: Product inserted or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          $ref: '#/components/responses/Error'
    delete:
      summary: Soft delete product
      description: Marks a product as deleted in the database. The product data remains stored but is excluded from standard queries.
      tags:
        - Product
      operationId: deleteProduct
      parameters:
        - in: query
          name: id
          schema:
            type: integer
          required: true
          description: Product ID
      responses:
        '200':
          description: Product marked as deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                      affected_rows:
                        type: integer
        '400':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'

  /products:
    get:
      summary: List products with filtering and pagination
      description: Returns a paginated list of products with optional filters for name, price range, and stock range. Supports limit and offset for pagination.
      tags:
        - Products
      operationId: getProducts
      parameters:
        - in: query
          name: name
          schema:
            type: string
          required: false
          description: Filter by product name (partial match)
        - in: query
          name: minPrice
          schema:
            type: number
            format: float
          required: false
          description: Minimum price
        - in: query
          name: maxPrice
          schema:
            type: number
            format: float
          required: false
          description: Maximum price
        - in: query
          name: minStock
          schema:
            type: integer
          required: false
          description: Minimum stock
        - in: query
          name: maxStock
          schema:
            type: integer
          required: false
          description: Maximum stock
        - in: query
          name: limit
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 100
          required: false
          description: Max number of products to return
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
            minimum: 0
          required: false
          description: Number of products to skip
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/Error'

  /product/history:
    get:
      summary: Get product history by product ID
      description: Returns the complete history of changes made to a product, such as name, price, and stock updates.
      tags:
        - Product History
      operationId: getProductHistory
      parameters:
        - in: query
          name: id
          schema:
            type: integer
          required: true
          description: Product ID
        - in: query
          name: limit
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 100
          required: false
          description: Max number of history records to return
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
            minimum: 0
          required: false
          description: Number of records to skip
      responses:
        '200':
          description: Product history
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductHistory'
        '400':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'

components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          maxLength: 255
        price:
          type: number
          format: float
          minimum: 0
        stock:
          type: integer
          minimum: 0
        created_at:
          type:
            - string
            - "null"
          # nullable: true # Allows null values (obsolette)
          format: date-time
        updated_at:
          type:
            - string
            - "null"
          # nullable: true # Allows null values (obsolette)
          format: date-time
        deleted:
          type: boolean
    ProductInput:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 255
        price:
          type: number
          format: float
          minimum: 0
          default: 0
        stock:
          type: integer
          minimum: 0
          default: 0
    ProductResponse:
      type: object
      properties:
        status:
          type: string
        data:
          $ref: '#/components/schemas/Product'
        error:
          type:
            - object
            - "null"
          # nullable: true # Allows null values (obsolette)
          properties:
            code:
              type: integer
            message:
              type: string
    ProductHistory:
      type: object
      properties:
        id:
          type: integer
        product_id:
          type: integer
        name:
          type: string
          maxLength: 255
        price:
          type: number
          format: float
          minimum: 0
          default: 0
        stock:
          type: integer
          minimum: 0
          default: 0
        changed_at:
          type:
            - string
            - "null"
          # nullable: true # Allows null values (obsolette)
          format: date-time

  responses:
    Error:
      description: Error response
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: error
              error:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
